name: Publish to GitHub Container Registry
# To uav4geo GitHub Container Registry
# https://github.com/orgs/uav4geo/packages

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
      - nettnikl-patch-186
      - test
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  # Run tests for any PRs.
  pull_request:
  # Enable manual trigger.
  workflow_dispatch:

env:
  IMAGE_NAME: libretranslate
  # The image ID is generated using the GitHub user ID
  # In our case IMAGE_ID: ghcr.io/uav4geo/libretranslate

jobs:
  # Test if the docker image build successfully
  #test:
  #  runs-on: ubuntu-latest

  #  steps:
  #    - uses: actions/checkout@v2

  #    - name: Run tests
  #      run: |
  #        docker build . --file Dockerfile

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  publish:
    #needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prepare
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          PLATFORMS=linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=image_id::${IMAGE_ID}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            --tag $IMAGE_ID:$VERSION \
            --file ./Dockerfile .

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        run: docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # Create an access token with `read:packages` and `write:packages` scopes
      # https://github.com/settings/tokens
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CONTAINER_REGISTRY_GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
            
      - name: Push image to GitHub Container Registry
        run: docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
